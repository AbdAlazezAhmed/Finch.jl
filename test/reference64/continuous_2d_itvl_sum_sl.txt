julia> @finch_code begin
        s1 .= 0
        for i = _, j = _
            s1[] += x1[j, i] * y[j] * d(j)
        end
    end
quote
    s1 = (ex.bodies[1]).tns.bind
    x1_lvl = ((ex.bodies[2]).body.body.rhs.args[1]).tns.bind.lvl
    x1_lvl_ptr = x1_lvl.ptr
    x1_lvl_idx = x1_lvl.idx
    x1_lvl_2 = x1_lvl.lvl
    x1_lvl_ptr_2 = x1_lvl_2.ptr
    x1_lvl_left = x1_lvl_2.left
    x1_lvl_right = x1_lvl_2.right
    x1_lvl_2_val = x1_lvl_2.lvl.val
    y_lvl = ((ex.bodies[2]).body.body.rhs.args[2]).tns.bind.lvl
    y_lvl_ptr = y_lvl.ptr
    y_lvl_left = y_lvl.left
    y_lvl_right = y_lvl.right
    y_lvl_val = y_lvl.lvl.val
    y_lvl.shape == x1_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(x1_lvl_2.shape))"))
    s1_val = 0
    x1_lvl_q = x1_lvl_ptr[1]
    x1_lvl_q_stop = x1_lvl_ptr[1 + 1]
    if x1_lvl_q < x1_lvl_q_stop
        x1_lvl_i1 = x1_lvl_idx[x1_lvl_q_stop - 1]
    else
        x1_lvl_i1 = 0.0f0
    end
    phase_stop = min(x1_lvl_i1, x1_lvl.shape)
    if phase_stop >= limit(1.0)
        if x1_lvl_idx[x1_lvl_q] < limit(1.0)
            x1_lvl_q = Finch.scansearch(x1_lvl_idx, limit(1.0), x1_lvl_q, x1_lvl_q_stop - 1)
        end
        while true
            x1_lvl_i = x1_lvl_idx[x1_lvl_q]
            if x1_lvl_i < phase_stop
                y_lvl_q = y_lvl_ptr[1]
                y_lvl_q_stop = y_lvl_ptr[1 + 1]
                if y_lvl_q < y_lvl_q_stop
                    y_lvl_i_end = y_lvl_right[y_lvl_q_stop - 1]
                else
                    y_lvl_i_end = 0.0f0
                end
                x1_lvl_2_q = x1_lvl_ptr_2[x1_lvl_q]
                x1_lvl_2_q_stop = x1_lvl_ptr_2[x1_lvl_q + 1]
                if x1_lvl_2_q < x1_lvl_2_q_stop
                    x1_lvl_2_i_end = x1_lvl_right[x1_lvl_2_q_stop - 1]
                else
                    x1_lvl_2_i_end = 0.0f0
                end
                phase_stop_3 = min(y_lvl.shape, x1_lvl_2_i_end, y_lvl_i_end)
                if phase_stop_3 >= limit(1.0)
                    j = limit(1.0)
                    if y_lvl_right[y_lvl_q] < limit(1.0)
                        y_lvl_q = Finch.scansearch(y_lvl_right, limit(1.0), y_lvl_q, y_lvl_q_stop - 1)
                    end
                    if x1_lvl_right[x1_lvl_2_q] < limit(1.0)
                        x1_lvl_2_q = Finch.scansearch(x1_lvl_right, limit(1.0), x1_lvl_2_q, x1_lvl_2_q_stop - 1)
                    end
                    while j <= phase_stop_3
                        j_start_2 = j
                        y_lvl_i_start = y_lvl_left[y_lvl_q]
                        y_lvl_i_stop = y_lvl_right[y_lvl_q]
                        x1_lvl_2_i_start = x1_lvl_left[x1_lvl_2_q]
                        x1_lvl_2_i_stop = x1_lvl_right[x1_lvl_2_q]
                        phase_stop_4 = min(y_lvl_i_stop, x1_lvl_2_i_stop, phase_stop_3)
                        if phase_stop_4 >= j
                            phase_start_3 = max(j_start_2, x1_lvl_2_i_start, y_lvl_i_start)
                            if phase_stop_4 >= phase_start_3
                                y_lvl_2_val_2 = y_lvl_val[y_lvl_q]
                                x1_lvl_3_val_2 = x1_lvl_2_val[x1_lvl_2_q]
                                s1_val = s1_val + drop_eps(-phase_start_3 + phase_stop_4) * x1_lvl_3_val_2 * y_lvl_2_val_2
                            end
                            y_lvl_q += phase_stop_4 == y_lvl_i_stop
                            x1_lvl_2_q += phase_stop_4 == x1_lvl_2_i_stop
                            j = phase_stop_4 + limit(0+ϵ)
                        end
                    end
                end
                x1_lvl_q += 1
            else
                phase_stop_11 = min(phase_stop, x1_lvl_i)
                if x1_lvl_i == phase_stop_11
                    y_lvl_q = y_lvl_ptr[1]
                    y_lvl_q_stop = y_lvl_ptr[1 + 1]
                    if y_lvl_q < y_lvl_q_stop
                        y_lvl_i_end = y_lvl_right[y_lvl_q_stop - 1]
                    else
                        y_lvl_i_end = 0.0f0
                    end
                    x1_lvl_2_q = x1_lvl_ptr_2[x1_lvl_q]
                    x1_lvl_2_q_stop = x1_lvl_ptr_2[x1_lvl_q + 1]
                    if x1_lvl_2_q < x1_lvl_2_q_stop
                        x1_lvl_2_i_end = x1_lvl_right[x1_lvl_2_q_stop - 1]
                    else
                        x1_lvl_2_i_end = 0.0f0
                    end
                    phase_stop_12 = min(y_lvl.shape, x1_lvl_2_i_end, y_lvl_i_end)
                    if phase_stop_12 >= limit(1.0)
                        j = limit(1.0)
                        if y_lvl_right[y_lvl_q] < limit(1.0)
                            y_lvl_q = Finch.scansearch(y_lvl_right, limit(1.0), y_lvl_q, y_lvl_q_stop - 1)
                        end
                        if x1_lvl_right[x1_lvl_2_q] < limit(1.0)
                            x1_lvl_2_q = Finch.scansearch(x1_lvl_right, limit(1.0), x1_lvl_2_q, x1_lvl_2_q_stop - 1)
                        end
                        while j <= phase_stop_12
                            j_start_5 = j
                            y_lvl_i_start = y_lvl_left[y_lvl_q]
                            y_lvl_i_stop = y_lvl_right[y_lvl_q]
                            x1_lvl_2_i_start = x1_lvl_left[x1_lvl_2_q]
                            x1_lvl_2_i_stop = x1_lvl_right[x1_lvl_2_q]
                            phase_stop_13 = min(y_lvl_i_stop, x1_lvl_2_i_stop, phase_stop_12)
                            if phase_stop_13 >= j
                                phase_start_9 = max(x1_lvl_2_i_start, y_lvl_i_start, j_start_5)
                                if phase_stop_13 >= phase_start_9
                                    y_lvl_2_val_4 = y_lvl_val[y_lvl_q]
                                    x1_lvl_3_val_4 = x1_lvl_2_val[x1_lvl_2_q]
                                    s1_val = s1_val + drop_eps(-phase_start_9 + phase_stop_13) * x1_lvl_3_val_4 * y_lvl_2_val_4
                                end
                                y_lvl_q += phase_stop_13 == y_lvl_i_stop
                                x1_lvl_2_q += phase_stop_13 == x1_lvl_2_i_stop
                                j = phase_stop_13 + limit(0+ϵ)
                            end
                        end
                    end
                    x1_lvl_q += 1
                end
                break
            end
        end
    end
    (s1 = (Scalar){0, Int64}(s1_val),)
end
julia> @finch begin
        s1 .= 0
        for i = _, j = _
            s1[] += x1[j, i] * y[j] * d(j)
        end
    end
(s1 = Scalar{0, Int64}(303),)

