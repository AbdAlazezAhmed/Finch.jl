julia> @finch_code begin
        s .= 0
        for i = _, j = _
            s[] += (x[j, i] + y[j, i]) * d(i, j)
        end
    end
quote
    s = (ex.bodies[1]).tns.bind
    x_lvl = (((ex.bodies[2]).body.body.rhs.args[1]).args[1]).tns.bind.lvl
    x_lvl_ptr = x_lvl.ptr
    x_lvl_left = x_lvl.left
    x_lvl_right = x_lvl.right
    x_lvl_2 = x_lvl.lvl
    x_lvl_ptr_2 = x_lvl_2.ptr
    x_lvl_left_2 = x_lvl_2.left
    x_lvl_right_2 = x_lvl_2.right
    x_lvl_2_val = x_lvl_2.lvl.val
    y_lvl = (((ex.bodies[2]).body.body.rhs.args[1]).args[2]).tns.bind.lvl
    y_lvl_ptr = y_lvl.ptr
    y_lvl_left = y_lvl.left
    y_lvl_right = y_lvl.right
    y_lvl_2 = y_lvl.lvl
    y_lvl_ptr_2 = y_lvl_2.ptr
    y_lvl_left_2 = y_lvl_2.left
    y_lvl_right_2 = y_lvl_2.right
    y_lvl_2_val = y_lvl_2.lvl.val
    y_lvl_2.shape == x_lvl_2.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl_2.shape) != $(x_lvl_2.shape))"))
    y_lvl.shape == x_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(y_lvl.shape) != $(x_lvl.shape))"))
    s_val = 0
    y_lvl_q = y_lvl_ptr[1]
    y_lvl_q_stop = y_lvl_ptr[1 + 1]
    if y_lvl_q < y_lvl_q_stop
        y_lvl_i_end = y_lvl_right[y_lvl_q_stop - 1]
    else
        y_lvl_i_end = 0.0f0
    end
    x_lvl_q = x_lvl_ptr[1]
    x_lvl_q_stop = x_lvl_ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i_end = x_lvl_right[x_lvl_q_stop - 1]
    else
        x_lvl_i_end = 0.0f0
    end
    phase_stop = min(y_lvl.shape, x_lvl_i_end, y_lvl_i_end)
    if phase_stop >= limit(1.0)
        i = limit(1.0)
        if y_lvl_right[y_lvl_q] < limit(1.0)
            y_lvl_q = Finch.scansearch(y_lvl_right, limit(1.0), y_lvl_q, y_lvl_q_stop - 1)
        end
        if x_lvl_right[x_lvl_q] < limit(1.0)
            x_lvl_q = Finch.scansearch(x_lvl_right, limit(1.0), x_lvl_q, x_lvl_q_stop - 1)
        end
        while i <= phase_stop
            i_start_2 = i
            y_lvl_i_start = y_lvl_left[y_lvl_q]
            y_lvl_i_stop = y_lvl_right[y_lvl_q]
            x_lvl_i_start = x_lvl_left[x_lvl_q]
            x_lvl_i_stop = x_lvl_right[x_lvl_q]
            phase_stop_2 = min(y_lvl_i_stop, x_lvl_i_stop, phase_stop)
            if phase_stop_2 >= i
                phase_start = max(i_start_2, y_lvl_i_start)
                phase_stop_4 = min(limit(0-ϵ) + x_lvl_i_start, phase_stop_2)
                if phase_stop_4 >= phase_start
                    y_lvl_2_q = y_lvl_ptr_2[y_lvl_q]
                    y_lvl_2_q_stop = y_lvl_ptr_2[y_lvl_q + 1]
                    if y_lvl_2_q < y_lvl_2_q_stop
                        y_lvl_2_i_end = y_lvl_right_2[y_lvl_2_q_stop - 1]
                    else
                        y_lvl_2_i_end = 0.0f0
                    end
                    phase_stop_5 = min(y_lvl_2.shape, y_lvl_2_i_end)
                    if phase_stop_5 >= limit(1.0)
                        j = limit(1.0)
                        if y_lvl_right_2[y_lvl_2_q] < limit(1.0)
                            y_lvl_2_q = Finch.scansearch(y_lvl_right_2, limit(1.0), y_lvl_2_q, y_lvl_2_q_stop - 1)
                        end
                        while true
                            j_start_2 = j
                            y_lvl_2_i_start = y_lvl_left_2[y_lvl_2_q]
                            y_lvl_2_i_stop = y_lvl_right_2[y_lvl_2_q]
                            if y_lvl_2_i_stop < phase_stop_5
                                phase_start_2 = max(j_start_2, y_lvl_2_i_start)
                                if y_lvl_2_i_stop >= phase_start_2
                                    y_lvl_3_val = y_lvl_2_val[y_lvl_2_q]
                                    s_val = s_val + drop_eps(-phase_start + phase_stop_4) * drop_eps(-phase_start_2 + y_lvl_2_i_stop) * y_lvl_3_val
                                end
                                y_lvl_2_q += y_lvl_2_i_stop == y_lvl_2_i_stop
                                j = y_lvl_2_i_stop + limit(0+ϵ)
                            else
                                phase_stop_9 = min(phase_stop_5, y_lvl_2_i_stop)
                                phase_start_3 = max(j_start_2, y_lvl_2_i_start)
                                if phase_stop_9 >= phase_start_3
                                    y_lvl_3_val_2 = y_lvl_2_val[y_lvl_2_q]
                                    s_val = s_val + drop_eps(-phase_start + phase_stop_4) * drop_eps(-phase_start_3 + phase_stop_9) * y_lvl_3_val_2
                                end
                                y_lvl_2_q += phase_stop_9 == y_lvl_2_i_stop
                                j = phase_stop_9 + limit(0+ϵ)
                                break
                            end
                        end
                    end
                end
                phase_start_5 = max(i_start_2, x_lvl_i_start)
                phase_stop_12 = min(limit(0-ϵ) + y_lvl_i_start, phase_stop_2)
                if phase_stop_12 >= phase_start_5
                    x_lvl_2_q = x_lvl_ptr_2[x_lvl_q]
                    x_lvl_2_q_stop = x_lvl_ptr_2[x_lvl_q + 1]
                    if x_lvl_2_q < x_lvl_2_q_stop
                        x_lvl_2_i_end = x_lvl_right_2[x_lvl_2_q_stop - 1]
                    else
                        x_lvl_2_i_end = 0.0f0
                    end
                    phase_stop_13 = min(y_lvl_2.shape, x_lvl_2_i_end)
                    if phase_stop_13 >= limit(1.0)
                        j = limit(1.0)
                        if x_lvl_right_2[x_lvl_2_q] < limit(1.0)
                            x_lvl_2_q = Finch.scansearch(x_lvl_right_2, limit(1.0), x_lvl_2_q, x_lvl_2_q_stop - 1)
                        end
                        while true
                            j_start_6 = j
                            x_lvl_2_i_start = x_lvl_left_2[x_lvl_2_q]
                            x_lvl_2_i_stop = x_lvl_right_2[x_lvl_2_q]
                            if x_lvl_2_i_stop < phase_stop_13
                                phase_start_6 = max(j_start_6, x_lvl_2_i_start)
                                if x_lvl_2_i_stop >= phase_start_6
                                    x_lvl_3_val = x_lvl_2_val[x_lvl_2_q]
                                    s_val = s_val + drop_eps(-phase_start_5 + phase_stop_12) * drop_eps(-phase_start_6 + x_lvl_2_i_stop) * x_lvl_3_val
                                end
                                x_lvl_2_q += x_lvl_2_i_stop == x_lvl_2_i_stop
                                j = x_lvl_2_i_stop + limit(0+ϵ)
                            else
                                phase_stop_17 = min(phase_stop_13, x_lvl_2_i_stop)
                                phase_start_7 = max(j_start_6, x_lvl_2_i_start)
                                if phase_stop_17 >= phase_start_7
                                    x_lvl_3_val_2 = x_lvl_2_val[x_lvl_2_q]
                                    s_val = s_val + drop_eps(-phase_start_5 + phase_stop_12) * drop_eps(-phase_start_7 + phase_stop_17) * x_lvl_3_val_2
                                end
                                x_lvl_2_q += phase_stop_17 == x_lvl_2_i_stop
                                j = phase_stop_17 + limit(0+ϵ)
                                break
                            end
                        end
                    end
                end
                phase_start_9 = max(i_start_2, x_lvl_i_start, y_lvl_i_start)
                if phase_stop_2 >= phase_start_9
                    x_lvl_2_q_2 = x_lvl_ptr_2[x_lvl_q]
                    x_lvl_2_q_stop_2 = x_lvl_ptr_2[x_lvl_q + 1]
                    if x_lvl_2_q_2 < x_lvl_2_q_stop_2
                        x_lvl_2_i_end_2 = x_lvl_right_2[x_lvl_2_q_stop_2 - 1]
                    else
                        x_lvl_2_i_end_2 = 0.0f0
                    end
                    y_lvl_2_q_2 = y_lvl_ptr_2[y_lvl_q]
                    y_lvl_2_q_stop_2 = y_lvl_ptr_2[y_lvl_q + 1]
                    if y_lvl_2_q_2 < y_lvl_2_q_stop_2
                        y_lvl_2_i_end_2 = y_lvl_right_2[y_lvl_2_q_stop_2 - 1]
                    else
                        y_lvl_2_i_end_2 = 0.0f0
                    end
                    phase_stop_21 = min(y_lvl_2.shape, y_lvl_2_i_end_2, x_lvl_2_i_end_2)
                    if phase_stop_21 >= limit(1.0)
                        j = limit(1.0)
                        if x_lvl_right_2[x_lvl_2_q_2] < limit(1.0)
                            x_lvl_2_q_2 = Finch.scansearch(x_lvl_right_2, limit(1.0), x_lvl_2_q_2, x_lvl_2_q_stop_2 - 1)
                        end
                        if y_lvl_right_2[y_lvl_2_q_2] < limit(1.0)
                            y_lvl_2_q_2 = Finch.scansearch(y_lvl_right_2, limit(1.0), y_lvl_2_q_2, y_lvl_2_q_stop_2 - 1)
                        end
                        while j <= phase_stop_21
                            j_start_10 = j
                            x_lvl_2_i_start_2 = x_lvl_left_2[x_lvl_2_q_2]
                            x_lvl_2_i_stop_2 = x_lvl_right_2[x_lvl_2_q_2]
                            y_lvl_2_i_start_2 = y_lvl_left_2[y_lvl_2_q_2]
                            y_lvl_2_i_stop_2 = y_lvl_right_2[y_lvl_2_q_2]
                            phase_stop_22 = min(x_lvl_2_i_stop_2, y_lvl_2_i_stop_2, phase_stop_21)
                            if phase_stop_22 >= j
                                phase_start_10 = max(j_start_10, x_lvl_2_i_start_2)
                                phase_stop_24 = min(limit(0-ϵ) + y_lvl_2_i_start_2, phase_stop_22)
                                if phase_stop_24 >= phase_start_10
                                    x_lvl_3_val_3 = x_lvl_2_val[x_lvl_2_q_2]
                                    s_val = s_val + drop_eps(-phase_start_9 + phase_stop_2) * drop_eps(-phase_start_10 + phase_stop_24) * x_lvl_3_val_3
                                end
                                phase_start_11 = max(j_start_10, y_lvl_2_i_start_2)
                                phase_stop_25 = min(limit(0-ϵ) + x_lvl_2_i_start_2, phase_stop_22)
                                if phase_stop_25 >= phase_start_11
                                    y_lvl_3_val_3 = y_lvl_2_val[y_lvl_2_q_2]
                                    s_val = s_val + drop_eps(-phase_start_9 + phase_stop_2) * drop_eps(-phase_start_11 + phase_stop_25) * y_lvl_3_val_3
                                end
                                phase_start_12 = max(j_start_10, y_lvl_2_i_start_2, x_lvl_2_i_start_2)
                                if phase_stop_22 >= phase_start_12
                                    y_lvl_3_val_4 = y_lvl_2_val[y_lvl_2_q_2]
                                    x_lvl_3_val_4 = x_lvl_2_val[x_lvl_2_q_2]
                                    s_val = s_val + drop_eps(-phase_start_9 + phase_stop_2) * drop_eps(-phase_start_12 + phase_stop_22) * (x_lvl_3_val_4 + y_lvl_3_val_4)
                                end
                                x_lvl_2_q_2 += phase_stop_22 == x_lvl_2_i_stop_2
                                y_lvl_2_q_2 += phase_stop_22 == y_lvl_2_i_stop_2
                                j = phase_stop_22 + limit(0+ϵ)
                            end
                        end
                    end
                    phase_start_13 = max(limit(0+ϵ) + x_lvl_2_i_end_2, limit(1.0))
                    phase_stop_27 = min(y_lvl_2.shape, y_lvl_2_i_end_2)
                    if phase_stop_27 >= phase_start_13
                        j = phase_start_13
                        if y_lvl_right_2[y_lvl_2_q_2] < phase_start_13
                            y_lvl_2_q_2 = Finch.scansearch(y_lvl_right_2, phase_start_13, y_lvl_2_q_2, y_lvl_2_q_stop_2 - 1)
                        end
                        while true
                            j_start_12 = j
                            y_lvl_2_i_start_2 = y_lvl_left_2[y_lvl_2_q_2]
                            y_lvl_2_i_stop_2 = y_lvl_right_2[y_lvl_2_q_2]
                            if y_lvl_2_i_stop_2 < phase_stop_27
                                phase_start_14 = max(y_lvl_2_i_start_2, j_start_12)
                                if y_lvl_2_i_stop_2 >= phase_start_14
                                    y_lvl_3_val_5 = y_lvl_2_val[y_lvl_2_q_2]
                                    s_val = s_val + drop_eps(-phase_start_9 + phase_stop_2) * drop_eps(-phase_start_14 + y_lvl_2_i_stop_2) * y_lvl_3_val_5
                                end
                                y_lvl_2_q_2 += y_lvl_2_i_stop_2 == y_lvl_2_i_stop_2
                                j = y_lvl_2_i_stop_2 + limit(0+ϵ)
                            else
                                phase_stop_31 = min(y_lvl_2_i_stop_2, phase_stop_27)
                                phase_start_15 = max(y_lvl_2_i_start_2, j_start_12)
                                if phase_stop_31 >= phase_start_15
                                    y_lvl_3_val_6 = y_lvl_2_val[y_lvl_2_q_2]
                                    s_val = s_val + drop_eps(-phase_start_9 + phase_stop_2) * drop_eps(-phase_start_15 + phase_stop_31) * y_lvl_3_val_6
                                end
                                y_lvl_2_q_2 += phase_stop_31 == y_lvl_2_i_stop_2
                                j = phase_stop_31 + limit(0+ϵ)
                                break
                            end
                        end
                    end
                    phase_start_16 = max(limit(1.0), limit(0+ϵ) + y_lvl_2_i_end_2)
                    phase_stop_34 = min(y_lvl_2.shape, x_lvl_2_i_end_2)
                    if phase_stop_34 >= phase_start_16
                        j = phase_start_16
                        if x_lvl_right_2[x_lvl_2_q_2] < phase_start_16
                            x_lvl_2_q_2 = Finch.scansearch(x_lvl_right_2, phase_start_16, x_lvl_2_q_2, x_lvl_2_q_stop_2 - 1)
                        end
                        while true
                            j_start_15 = j
                            x_lvl_2_i_start_2 = x_lvl_left_2[x_lvl_2_q_2]
                            x_lvl_2_i_stop_2 = x_lvl_right_2[x_lvl_2_q_2]
                            if x_lvl_2_i_stop_2 < phase_stop_34
                                phase_start_17 = max(x_lvl_2_i_start_2, j_start_15)
                                if x_lvl_2_i_stop_2 >= phase_start_17
                                    x_lvl_3_val_5 = x_lvl_2_val[x_lvl_2_q_2]
                                    s_val = s_val + drop_eps(-phase_start_9 + phase_stop_2) * drop_eps(-phase_start_17 + x_lvl_2_i_stop_2) * x_lvl_3_val_5
                                end
                                x_lvl_2_q_2 += x_lvl_2_i_stop_2 == x_lvl_2_i_stop_2
                                j = x_lvl_2_i_stop_2 + limit(0+ϵ)
                            else
                                phase_stop_38 = min(x_lvl_2_i_stop_2, phase_stop_34)
                                phase_start_18 = max(x_lvl_2_i_start_2, j_start_15)
                                if phase_stop_38 >= phase_start_18
                                    x_lvl_3_val_6 = x_lvl_2_val[x_lvl_2_q_2]
                                    s_val = s_val + drop_eps(-phase_start_9 + phase_stop_2) * drop_eps(-phase_start_18 + phase_stop_38) * x_lvl_3_val_6
                                end
                                x_lvl_2_q_2 += phase_stop_38 == x_lvl_2_i_stop_2
                                j = phase_stop_38 + limit(0+ϵ)
                                break
                            end
                        end
                    end
                end
                y_lvl_q += phase_stop_2 == y_lvl_i_stop
                x_lvl_q += phase_stop_2 == x_lvl_i_stop
                i = phase_stop_2 + limit(0+ϵ)
            end
        end
    end
    phase_start_20 = max(limit(1.0), limit(0+ϵ) + y_lvl_i_end)
    phase_stop_41 = min(y_lvl.shape, x_lvl_i_end)
    if phase_stop_41 >= phase_start_20
        i = phase_start_20
        if x_lvl_right[x_lvl_q] < phase_start_20
            x_lvl_q = Finch.scansearch(x_lvl_right, phase_start_20, x_lvl_q, x_lvl_q_stop - 1)
        end
        while true
            i_start_4 = i
            x_lvl_i_start = x_lvl_left[x_lvl_q]
            x_lvl_i_stop = x_lvl_right[x_lvl_q]
            if x_lvl_i_stop < phase_stop_41
                phase_start_21 = max(x_lvl_i_start, i_start_4)
                if x_lvl_i_stop >= phase_start_21
                    x_lvl_2_q_3 = x_lvl_ptr_2[x_lvl_q]
                    x_lvl_2_q_stop_3 = x_lvl_ptr_2[x_lvl_q + 1]
                    if x_lvl_2_q_3 < x_lvl_2_q_stop_3
                        x_lvl_2_i_end_3 = x_lvl_right_2[x_lvl_2_q_stop_3 - 1]
                    else
                        x_lvl_2_i_end_3 = 0.0f0
                    end
                    phase_stop_45 = min(y_lvl_2.shape, x_lvl_2_i_end_3)
                    if phase_stop_45 >= limit(1.0)
                        j = limit(1.0)
                        if x_lvl_right_2[x_lvl_2_q_3] < limit(1.0)
                            x_lvl_2_q_3 = Finch.scansearch(x_lvl_right_2, limit(1.0), x_lvl_2_q_3, x_lvl_2_q_stop_3 - 1)
                        end
                        while true
                            j_start_19 = j
                            x_lvl_2_i_start_3 = x_lvl_left_2[x_lvl_2_q_3]
                            x_lvl_2_i_stop_3 = x_lvl_right_2[x_lvl_2_q_3]
                            if x_lvl_2_i_stop_3 < phase_stop_45
                                phase_start_22 = max(j_start_19, x_lvl_2_i_start_3)
                                if x_lvl_2_i_stop_3 >= phase_start_22
                                    x_lvl_3_val_7 = x_lvl_2_val[x_lvl_2_q_3]
                                    s_val = s_val + drop_eps(-phase_start_21 + x_lvl_i_stop) * drop_eps(-phase_start_22 + x_lvl_2_i_stop_3) * x_lvl_3_val_7
                                end
                                x_lvl_2_q_3 += x_lvl_2_i_stop_3 == x_lvl_2_i_stop_3
                                j = x_lvl_2_i_stop_3 + limit(0+ϵ)
                            else
                                phase_stop_49 = min(phase_stop_45, x_lvl_2_i_stop_3)
                                phase_start_23 = max(j_start_19, x_lvl_2_i_start_3)
                                if phase_stop_49 >= phase_start_23
                                    x_lvl_3_val_8 = x_lvl_2_val[x_lvl_2_q_3]
                                    s_val = s_val + drop_eps(-phase_start_21 + x_lvl_i_stop) * drop_eps(-phase_start_23 + phase_stop_49) * x_lvl_3_val_8
                                end
                                x_lvl_2_q_3 += phase_stop_49 == x_lvl_2_i_stop_3
                                j = phase_stop_49 + limit(0+ϵ)
                                break
                            end
                        end
                    end
                end
                x_lvl_q += x_lvl_i_stop == x_lvl_i_stop
                i = x_lvl_i_stop + limit(0+ϵ)
            else
                phase_stop_52 = min(x_lvl_i_stop, phase_stop_41)
                phase_start_25 = max(x_lvl_i_start, i_start_4)
                if phase_stop_52 >= phase_start_25
                    x_lvl_2_q_4 = x_lvl_ptr_2[x_lvl_q]
                    x_lvl_2_q_stop_4 = x_lvl_ptr_2[x_lvl_q + 1]
                    if x_lvl_2_q_4 < x_lvl_2_q_stop_4
                        x_lvl_2_i_end_4 = x_lvl_right_2[x_lvl_2_q_stop_4 - 1]
                    else
                        x_lvl_2_i_end_4 = 0.0f0
                    end
                    phase_stop_55 = min(y_lvl_2.shape, x_lvl_2_i_end_4)
                    if phase_stop_55 >= limit(1.0)
                        j = limit(1.0)
                        if x_lvl_right_2[x_lvl_2_q_4] < limit(1.0)
                            x_lvl_2_q_4 = Finch.scansearch(x_lvl_right_2, limit(1.0), x_lvl_2_q_4, x_lvl_2_q_stop_4 - 1)
                        end
                        while true
                            j_start_23 = j
                            x_lvl_2_i_start_4 = x_lvl_left_2[x_lvl_2_q_4]
                            x_lvl_2_i_stop_4 = x_lvl_right_2[x_lvl_2_q_4]
                            if x_lvl_2_i_stop_4 < phase_stop_55
                                phase_start_26 = max(j_start_23, x_lvl_2_i_start_4)
                                if x_lvl_2_i_stop_4 >= phase_start_26
                                    x_lvl_3_val_9 = x_lvl_2_val[x_lvl_2_q_4]
                                    s_val = s_val + drop_eps(-phase_start_25 + phase_stop_52) * drop_eps(-phase_start_26 + x_lvl_2_i_stop_4) * x_lvl_3_val_9
                                end
                                x_lvl_2_q_4 += x_lvl_2_i_stop_4 == x_lvl_2_i_stop_4
                                j = x_lvl_2_i_stop_4 + limit(0+ϵ)
                            else
                                phase_stop_59 = min(phase_stop_55, x_lvl_2_i_stop_4)
                                phase_start_27 = max(j_start_23, x_lvl_2_i_start_4)
                                if phase_stop_59 >= phase_start_27
                                    x_lvl_3_val_10 = x_lvl_2_val[x_lvl_2_q_4]
                                    s_val = s_val + drop_eps(-phase_start_25 + phase_stop_52) * drop_eps(-phase_start_27 + phase_stop_59) * x_lvl_3_val_10
                                end
                                x_lvl_2_q_4 += phase_stop_59 == x_lvl_2_i_stop_4
                                j = phase_stop_59 + limit(0+ϵ)
                                break
                            end
                        end
                    end
                end
                x_lvl_q += phase_stop_52 == x_lvl_i_stop
                i = phase_stop_52 + limit(0+ϵ)
                break
            end
        end
    end
    phase_start_29 = max(limit(1.0), limit(0+ϵ) + x_lvl_i_end)
    phase_stop_62 = min(y_lvl.shape, y_lvl_i_end)
    if phase_stop_62 >= phase_start_29
        i = phase_start_29
        if y_lvl_right[y_lvl_q] < phase_start_29
            y_lvl_q = Finch.scansearch(y_lvl_right, phase_start_29, y_lvl_q, y_lvl_q_stop - 1)
        end
        while true
            i_start_7 = i
            y_lvl_i_start = y_lvl_left[y_lvl_q]
            y_lvl_i_stop = y_lvl_right[y_lvl_q]
            if y_lvl_i_stop < phase_stop_62
                phase_start_30 = max(y_lvl_i_start, i_start_7)
                if y_lvl_i_stop >= phase_start_30
                    y_lvl_2_q_3 = y_lvl_ptr_2[y_lvl_q]
                    y_lvl_2_q_stop_3 = y_lvl_ptr_2[y_lvl_q + 1]
                    if y_lvl_2_q_3 < y_lvl_2_q_stop_3
                        y_lvl_2_i_end_3 = y_lvl_right_2[y_lvl_2_q_stop_3 - 1]
                    else
                        y_lvl_2_i_end_3 = 0.0f0
                    end
                    phase_stop_66 = min(y_lvl_2.shape, y_lvl_2_i_end_3)
                    if phase_stop_66 >= limit(1.0)
                        j = limit(1.0)
                        if y_lvl_right_2[y_lvl_2_q_3] < limit(1.0)
                            y_lvl_2_q_3 = Finch.scansearch(y_lvl_right_2, limit(1.0), y_lvl_2_q_3, y_lvl_2_q_stop_3 - 1)
                        end
                        while true
                            j_start_27 = j
                            y_lvl_2_i_start_3 = y_lvl_left_2[y_lvl_2_q_3]
                            y_lvl_2_i_stop_3 = y_lvl_right_2[y_lvl_2_q_3]
                            if y_lvl_2_i_stop_3 < phase_stop_66
                                phase_start_31 = max(j_start_27, y_lvl_2_i_start_3)
                                if y_lvl_2_i_stop_3 >= phase_start_31
                                    y_lvl_3_val_7 = y_lvl_2_val[y_lvl_2_q_3]
                                    s_val = s_val + drop_eps(-phase_start_30 + y_lvl_i_stop) * drop_eps(-phase_start_31 + y_lvl_2_i_stop_3) * y_lvl_3_val_7
                                end
                                y_lvl_2_q_3 += y_lvl_2_i_stop_3 == y_lvl_2_i_stop_3
                                j = y_lvl_2_i_stop_3 + limit(0+ϵ)
                            else
                                phase_stop_70 = min(phase_stop_66, y_lvl_2_i_stop_3)
                                phase_start_32 = max(j_start_27, y_lvl_2_i_start_3)
                                if phase_stop_70 >= phase_start_32
                                    y_lvl_3_val_8 = y_lvl_2_val[y_lvl_2_q_3]
                                    s_val = s_val + drop_eps(-phase_start_30 + y_lvl_i_stop) * drop_eps(-phase_start_32 + phase_stop_70) * y_lvl_3_val_8
                                end
                                y_lvl_2_q_3 += phase_stop_70 == y_lvl_2_i_stop_3
                                j = phase_stop_70 + limit(0+ϵ)
                                break
                            end
                        end
                    end
                end
                y_lvl_q += y_lvl_i_stop == y_lvl_i_stop
                i = y_lvl_i_stop + limit(0+ϵ)
            else
                phase_stop_73 = min(y_lvl_i_stop, phase_stop_62)
                phase_start_34 = max(y_lvl_i_start, i_start_7)
                if phase_stop_73 >= phase_start_34
                    y_lvl_2_q_4 = y_lvl_ptr_2[y_lvl_q]
                    y_lvl_2_q_stop_4 = y_lvl_ptr_2[y_lvl_q + 1]
                    if y_lvl_2_q_4 < y_lvl_2_q_stop_4
                        y_lvl_2_i_end_4 = y_lvl_right_2[y_lvl_2_q_stop_4 - 1]
                    else
                        y_lvl_2_i_end_4 = 0.0f0
                    end
                    phase_stop_76 = min(y_lvl_2.shape, y_lvl_2_i_end_4)
                    if phase_stop_76 >= limit(1.0)
                        j = limit(1.0)
                        if y_lvl_right_2[y_lvl_2_q_4] < limit(1.0)
                            y_lvl_2_q_4 = Finch.scansearch(y_lvl_right_2, limit(1.0), y_lvl_2_q_4, y_lvl_2_q_stop_4 - 1)
                        end
                        while true
                            j_start_31 = j
                            y_lvl_2_i_start_4 = y_lvl_left_2[y_lvl_2_q_4]
                            y_lvl_2_i_stop_4 = y_lvl_right_2[y_lvl_2_q_4]
                            if y_lvl_2_i_stop_4 < phase_stop_76
                                phase_start_35 = max(j_start_31, y_lvl_2_i_start_4)
                                if y_lvl_2_i_stop_4 >= phase_start_35
                                    y_lvl_3_val_9 = y_lvl_2_val[y_lvl_2_q_4]
                                    s_val = s_val + drop_eps(-phase_start_34 + phase_stop_73) * drop_eps(-phase_start_35 + y_lvl_2_i_stop_4) * y_lvl_3_val_9
                                end
                                y_lvl_2_q_4 += y_lvl_2_i_stop_4 == y_lvl_2_i_stop_4
                                j = y_lvl_2_i_stop_4 + limit(0+ϵ)
                            else
                                phase_stop_80 = min(phase_stop_76, y_lvl_2_i_stop_4)
                                phase_start_36 = max(j_start_31, y_lvl_2_i_start_4)
                                if phase_stop_80 >= phase_start_36
                                    y_lvl_3_val_10 = y_lvl_2_val[y_lvl_2_q_4]
                                    s_val = s_val + drop_eps(-phase_start_34 + phase_stop_73) * drop_eps(-phase_start_36 + phase_stop_80) * y_lvl_3_val_10
                                end
                                y_lvl_2_q_4 += phase_stop_80 == y_lvl_2_i_stop_4
                                j = phase_stop_80 + limit(0+ϵ)
                                break
                            end
                        end
                    end
                end
                y_lvl_q += phase_stop_73 == y_lvl_i_stop
                i = phase_stop_73 + limit(0+ϵ)
                break
            end
        end
    end
    (s = (Scalar){0, Int64}(s_val),)
end
julia> @finch begin
        s .= 0
        for i = _, j = _
            s[] += (x[j, i] + y[j, i]) * d(i, j)
        end
    end
(s = Scalar{0, Int64}(5238),)

