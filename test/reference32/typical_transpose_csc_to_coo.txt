julia> A = Fiber!(Dense(SparseList(Element(0.0))), [0 0 3.3; 1.1 0 0; 2.2 0 4.4; 0 0 5.5])
Dense [:,1:3]
├─[:,1]: SparseList (0.0) [1:4]
│ ├─[2]: 1.1
│ ├─[3]: 2.2
├─[:,2]: SparseList (0.0) [1:4]
├─[:,3]: SparseList (0.0) [1:4]
│ ├─[1]: 3.3
│ ├─[3]: 4.4
│ ├─[4]: 5.5
julia> B = Fiber!(SparseHash{2}(Element(0.0)))
SparseHash (0.0) [1:0,1:0]
julia> @finch_code mode = fastfinch begin
        B .= 0
        for j = _
            for i = _
                B[j, i] = A[i, j]
            end
        end
    end
quote
    B_lvl = (ex.bodies[1]).tns.bind.lvl
    B_lvl_ptr = (ex.bodies[1]).tns.bind.lvl.ptr
    B_lvl_tbl = (ex.bodies[1]).tns.bind.lvl.tbl
    B_lvl_srt = (ex.bodies[1]).tns.bind.lvl.srt
    B_lvl_2 = B_lvl.lvl
    B_lvl_val = B_lvl.lvl.val
    A_lvl = (ex.bodies[2]).body.body.rhs.tns.bind.lvl
    A_lvl_2 = A_lvl.lvl
    A_lvl_ptr = A_lvl_2.ptr
    A_lvl_idx = A_lvl_2.idx
    A_lvl_2_val = A_lvl_2.lvl.val
    B_lvl_qos_fill = 0
    B_lvl_qos_stop = 0
    empty!(B_lvl_tbl)
    empty!(B_lvl_srt)
    Finch.resize_if_smaller!(B_lvl_ptr, 1 + 1)
    Finch.fill_range!(B_lvl_ptr, 0, 1 + 1, 1 + 1)
    for j_4 = 1:A_lvl.shape
        A_lvl_q = (1 - 1) * A_lvl.shape + j_4
        A_lvl_2_q = A_lvl_ptr[A_lvl_q]
        A_lvl_2_q_stop = A_lvl_ptr[A_lvl_q + 1]
        if A_lvl_2_q < A_lvl_2_q_stop
            A_lvl_2_i1 = A_lvl_idx[A_lvl_2_q_stop - 1]
        else
            A_lvl_2_i1 = 0
        end
        phase_stop = min(A_lvl_2_i1, A_lvl_2.shape)
        if phase_stop >= 1
            if A_lvl_idx[A_lvl_2_q] < 1
                A_lvl_2_q = Finch.scansearch(A_lvl_idx, 1, A_lvl_2_q, A_lvl_2_q_stop - 1)
            end
            while true
                A_lvl_2_i = A_lvl_idx[A_lvl_2_q]
                if A_lvl_2_i < phase_stop
                    A_lvl_3_val = A_lvl_2_val[A_lvl_2_q]
                    B_lvl_key_2 = (1, (j_4, A_lvl_2_i))
                    B_lvl_q_2 = get(B_lvl_tbl, B_lvl_key_2, B_lvl_qos_fill + 1)
                    if B_lvl_q_2 > B_lvl_qos_stop
                        B_lvl_qos_stop = max(B_lvl_qos_stop << 1, 1)
                        Finch.resize_if_smaller!(B_lvl_val, B_lvl_qos_stop)
                        Finch.fill_range!(B_lvl_val, 0.0, B_lvl_q_2, B_lvl_qos_stop)
                    end
                    B_lvl_val[B_lvl_q_2] = A_lvl_3_val
                    if B_lvl_q_2 > B_lvl_qos_fill
                        B_lvl_qos_fill = B_lvl_q_2
                        B_lvl_tbl[B_lvl_key_2] = B_lvl_q_2
                        B_lvl_ptr[1 + 1] += 1
                    end
                    A_lvl_2_q += 1
                else
                    phase_stop_3 = min(phase_stop, A_lvl_2_i)
                    if A_lvl_2_i == phase_stop_3
                        A_lvl_3_val = A_lvl_2_val[A_lvl_2_q]
                        B_lvl_key_3 = (1, (j_4, phase_stop_3))
                        B_lvl_q_3 = get(B_lvl_tbl, B_lvl_key_3, B_lvl_qos_fill + 1)
                        if B_lvl_q_3 > B_lvl_qos_stop
                            B_lvl_qos_stop = max(B_lvl_qos_stop << 1, 1)
                            Finch.resize_if_smaller!(B_lvl_val, B_lvl_qos_stop)
                            Finch.fill_range!(B_lvl_val, 0.0, B_lvl_q_3, B_lvl_qos_stop)
                        end
                        B_lvl_val[B_lvl_q_3] = A_lvl_3_val
                        if B_lvl_q_3 > B_lvl_qos_fill
                            B_lvl_qos_fill = B_lvl_q_3
                            B_lvl_tbl[B_lvl_key_3] = B_lvl_q_3
                            B_lvl_ptr[1 + 1] += 1
                        end
                        A_lvl_2_q += 1
                    end
                    break
                end
            end
        end
    end
    resize!(B_lvl_srt, length(B_lvl_tbl))
    copyto!(B_lvl_srt, pairs(B_lvl_tbl))
    sort!(B_lvl_srt, by = hashkeycmp)
    for p = 2:1 + 1
        B_lvl_ptr[p] += B_lvl_ptr[p - 1]
    end
    resize!(B_lvl_ptr, 1 + 1)
    qos = B_lvl_ptr[end] - 1
    resize!(B_lvl_srt, qos)
    resize!(B_lvl_val, qos)
    (B = Fiber((SparseHashLevel){2, Tuple{Int32, Int32}}(B_lvl_2, (A_lvl.shape, A_lvl_2.shape), B_lvl_ptr, B_lvl_tbl, B_lvl_srt)),)
end
julia> @finch mode = fastfinch begin
        B .= 0
        for j = _
            for i = _
                B[j, i] = A[i, j]
            end
        end
    end
(B = Fiber(SparseHash{2, Tuple{Int32, Int32}}(Element{0.0, Float64, Int32}([1.1, 2.2, 3.3, 4.4, 5.5]), (3, 4), [1, 6], Dict{Tuple{Int32, Tuple{Int32, Int32}}, Int32}((1, (1, 2)) => 1, (1, (1, 3)) => 2, (1, (3, 1)) => 3, (1, (3, 3)) => 4, (1, (3, 4)) => 5), [(1, (3, 1)) => 3, (1, (1, 2)) => 1, (1, (1, 3)) => 2, (1, (3, 3)) => 4, (1, (3, 4)) => 5])),)

