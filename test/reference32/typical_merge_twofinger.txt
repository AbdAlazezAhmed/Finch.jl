julia> @finch_code begin
        z .= 0
        @loop i z[i] = x[i] + y[i]
    end
quote
    z_lvl = (ex.bodies[1]).tns.tns.lvl
    z_lvl_2 = z_lvl.lvl
    x_lvl = ((ex.bodies[2]).body.rhs.args[1]).tns.tns.lvl
    x_lvl_2 = x_lvl.lvl
    y_lvl = ((ex.bodies[2]).body.rhs.args[2]).tns.tns.lvl
    y_lvl_2 = y_lvl.lvl
    x_lvl.shape == y_lvl.shape || throw(DimensionMismatch("mismatched dimension limits ($(x_lvl.shape) != $(y_lvl.shape))"))
    z_lvl_qos_stop = 0
    resize_if_smaller!(z_lvl.ptr, 1 + 1)
    fill_range!(z_lvl.ptr, 0, 1 + 1, 1 + 1)
    z_lvl_qos = 0 + 1
    y_lvl_q = y_lvl.ptr[1]
    y_lvl_q_stop = y_lvl.ptr[1 + 1]
    if y_lvl_q < y_lvl_q_stop
        y_lvl_i1 = y_lvl.idx[y_lvl_q_stop - 1]
    else
        y_lvl_i1 = 0
    end
    x_lvl_q = x_lvl.ptr[1]
    x_lvl_q_stop = x_lvl.ptr[1 + 1]
    if x_lvl_q < x_lvl_q_stop
        x_lvl_i1 = x_lvl.idx[x_lvl_q_stop - 1]
    else
        x_lvl_i1 = 0
    end
    i = 1
    phase_stop = min(x_lvl.shape, y_lvl_i1, x_lvl_i1)
    if phase_stop >= 1
        i = 1
        if y_lvl.idx[y_lvl_q] < 1
            y_lvl_q = scansearch(y_lvl.idx, 1, y_lvl_q, y_lvl_q_stop - 1)
        end
        if x_lvl.idx[x_lvl_q] < 1
            x_lvl_q = scansearch(x_lvl.idx, 1, x_lvl_q, x_lvl_q_stop - 1)
        end
        while i <= phase_stop
            y_lvl_i = y_lvl.idx[y_lvl_q]
            x_lvl_i = x_lvl.idx[x_lvl_q]
            phase_stop_2 = min(x_lvl_i, phase_stop, y_lvl_i)
            if y_lvl_i == phase_stop_2 && x_lvl_i == phase_stop_2
                y_lvl_2_val_2 = y_lvl_2.val[y_lvl_q]
                x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                if z_lvl_qos > z_lvl_qos_stop
                    z_lvl_qos_stop = max(z_lvl_qos_stop << 1, 1)
                    resize_if_smaller!(z_lvl.idx, z_lvl_qos_stop)
                    resize_if_smaller!(z_lvl_2.val, z_lvl_qos_stop)
                    fill_range!(z_lvl_2.val, 0.0, z_lvl_qos, z_lvl_qos_stop)
                end
                z_lvl_2.val[z_lvl_qos] = x_lvl_2_val_2 + y_lvl_2_val_2
                z_lvl.idx[z_lvl_qos] = phase_stop_2
                z_lvl_qos += 1
                y_lvl_q += 1
                x_lvl_q += 1
            elseif x_lvl_i == phase_stop_2
                x_lvl_2_val_2 = x_lvl_2.val[x_lvl_q]
                if z_lvl_qos > z_lvl_qos_stop
                    z_lvl_qos_stop = max(z_lvl_qos_stop << 1, 1)
                    resize_if_smaller!(z_lvl.idx, z_lvl_qos_stop)
                    resize_if_smaller!(z_lvl_2.val, z_lvl_qos_stop)
                    fill_range!(z_lvl_2.val, 0.0, z_lvl_qos, z_lvl_qos_stop)
                end
                z_lvl_2.val[z_lvl_qos] = x_lvl_2_val_2
                z_lvl.idx[z_lvl_qos] = phase_stop_2
                z_lvl_qos += 1
                x_lvl_q += 1
            elseif y_lvl_i == phase_stop_2
                y_lvl_2_val_2 = y_lvl_2.val[y_lvl_q]
                if z_lvl_qos > z_lvl_qos_stop
                    z_lvl_qos_stop = max(z_lvl_qos_stop << 1, 1)
                    resize_if_smaller!(z_lvl.idx, z_lvl_qos_stop)
                    resize_if_smaller!(z_lvl_2.val, z_lvl_qos_stop)
                    fill_range!(z_lvl_2.val, 0.0, z_lvl_qos, z_lvl_qos_stop)
                end
                z_lvl_2.val[z_lvl_qos] = y_lvl_2_val_2
                z_lvl.idx[z_lvl_qos] = phase_stop_2
                z_lvl_qos += 1
                y_lvl_q += 1
            end
            i = phase_stop_2 + 1
        end
        i = phase_stop + 1
    end
    phase_stop_3 = min(x_lvl.shape, y_lvl_i1)
    if phase_stop_3 >= i
        if y_lvl.idx[y_lvl_q] < i
            y_lvl_q = scansearch(y_lvl.idx, i, y_lvl_q, y_lvl_q_stop - 1)
        end
        while i <= phase_stop_3
            y_lvl_i = y_lvl.idx[y_lvl_q]
            phase_stop_4 = min(y_lvl_i, phase_stop_3)
            if y_lvl_i == phase_stop_4
                y_lvl_2_val_3 = y_lvl_2.val[y_lvl_q]
                if z_lvl_qos > z_lvl_qos_stop
                    z_lvl_qos_stop = max(z_lvl_qos_stop << 1, 1)
                    resize_if_smaller!(z_lvl.idx, z_lvl_qos_stop)
                    resize_if_smaller!(z_lvl_2.val, z_lvl_qos_stop)
                    fill_range!(z_lvl_2.val, 0.0, z_lvl_qos, z_lvl_qos_stop)
                end
                z_lvl_2.val[z_lvl_qos] = y_lvl_2_val_3
                z_lvl.idx[z_lvl_qos] = phase_stop_4
                z_lvl_qos += 1
                y_lvl_q += 1
            end
            i = phase_stop_4 + 1
        end
        i = phase_stop_3 + 1
    end
    phase_stop_5 = min(x_lvl.shape, x_lvl_i1)
    if phase_stop_5 >= i
        if x_lvl.idx[x_lvl_q] < i
            x_lvl_q = scansearch(x_lvl.idx, i, x_lvl_q, x_lvl_q_stop - 1)
        end
        while i <= phase_stop_5
            x_lvl_i = x_lvl.idx[x_lvl_q]
            phase_stop_6 = min(x_lvl_i, phase_stop_5)
            if x_lvl_i == phase_stop_6
                x_lvl_2_val_3 = x_lvl_2.val[x_lvl_q]
                if z_lvl_qos > z_lvl_qos_stop
                    z_lvl_qos_stop = max(z_lvl_qos_stop << 1, 1)
                    resize_if_smaller!(z_lvl.idx, z_lvl_qos_stop)
                    resize_if_smaller!(z_lvl_2.val, z_lvl_qos_stop)
                    fill_range!(z_lvl_2.val, 0.0, z_lvl_qos, z_lvl_qos_stop)
                end
                z_lvl_2.val[z_lvl_qos] = x_lvl_2_val_3
                z_lvl.idx[z_lvl_qos] = phase_stop_6
                z_lvl_qos += 1
                x_lvl_q += 1
            end
            i = phase_stop_6 + 1
        end
    end
    z_lvl.ptr[1 + 1] = (z_lvl_qos - 0) - 1
    for p = 2:1 + 1
        z_lvl.ptr[p] += z_lvl.ptr[p - 1]
    end
    resize!(z_lvl.ptr, 1 + 1)
    qos = z_lvl.ptr[end] - 1
    resize!(z_lvl.idx, qos)
    resize!(z_lvl_2.val, qos)
    (z = Fiber((SparseListLevel){Int64, Int64}(z_lvl_2, x_lvl.shape, z_lvl.ptr, z_lvl.idx)),)
end
julia> @finch begin
        z .= 0
        @loop i z[i] = x[i] + y[i]
    end
(z = Fiber(SparseList{Int64, Int64}(Element{0.0, Float64}([2.0, 1.0, 3.0, 5.0, 5.0, 1.0, 6.0]), 10, [1, 8], [1, 2, 3, 5, 7, 8, 9])),)

