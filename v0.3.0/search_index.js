var documenterSearchIndex = {"docs":
[{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"CurrentModule = Finch","category":"page"},{"location":"getting_started/#Finch","page":"Getting Started","title":"Finch","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Finch is an adaptable compiler for loop nests over structured arrays. Finch can specialize to tensors with runs of repeated values, or to tensors which are sparse (mostly zero). Finch supports general sparsity as well as many specialized sparsity patterns, like clustered nonzeros, diagonals, or triangles.  In addition to zero, Finch supports optimizations over arbitrary fill values and operators.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"At it's heart, Finch is powered by a domain specific language for coiteration, breaking structured iterators into units we call Looplets. The Looplets are lowered progressively, leaving several opportunities to rewrite and simplify intermediate expressions.","category":"page"},{"location":"getting_started/#Installation:","page":"Getting Started","title":"Installation:","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"julia> using Pkg; Pkg.add(\"Finch\")","category":"page"},{"location":"getting_started/#Quick-start-guide","page":"Getting Started","title":"Quick start guide","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"You can convert an AbstractArray to a Finch Fiber with the fiber function:","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"julia> using Finch, SparseArrays\n\njulia> A = fiber(sprand(5, 6, 0.5))\nDense [1:5]\n│ \n├─[1]:\n│ SparseList (0.0) [1:6]\n│ │ \n│ └─[1]      [3]    \n│   0.758513 0.65606\n│ \n├─[2]:\n│ SparseList (0.0) [1:6]\n│ │ \n│ └─[2]      [5]     \n│   0.103387 0.103223\n│ \n├─[3]:\n│ SparseList (0.0) [1:6]\n│ │ \n│ └─[1]      [2]     \n│   0.653705 0.225958\n│ \n├─[4]:\n│ SparseList (0.0) [1:6]\n│ │ \n│ └─[1]      [2]      [4]      [5]     \n│   0.918955 0.898256 0.444113 0.843331\n│ \n├─[5]:\n│ SparseList (0.0) [1:6]\n│ │ \n│ └─[4]      \n│   0.0701716\n\n\njulia> A(1, 3)\n0.65605977333406\n\njulia> A(1, 2)\n0.0","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Arrays in finch are stored using a recursive tree-based approach. ","category":"page"},{"location":"embed/","page":"Embedding","title":"Embedding","text":"CurrentModule = Finch","category":"page"},{"location":"embed/#Public-Functions","page":"Embedding","title":"Public Functions","text":"","category":"section"},{"location":"embed/","page":"Embedding","title":"Embedding","text":"Finch.h.FINCH_SCOPE\nFinch.h.finch_escape\nFinch.h.finch_eval\nFinch.h.finch_consume_vector\nFinch.h.finch_free\nFinch.h.finch_mirror_vector\nFinch.h.finch_initialize\nFinch.h.finch_root\nFinch.h.finch_exec\nFinch.h.finch_T\nFinch.h.finch_call\nFinch.h.finch_finalize","category":"page"},{"location":"embed/#Finch.h.FINCH_SCOPE","page":"Embedding","title":"Finch.h.FINCH_SCOPE","text":"FINCH_SCOPE([stmt])\n\nExecute the statement stmt in a new finch scope. All finch objects allocated within this scope will be freed when the scope is closed, unless passed to finch_escape to pass them to the parent scope. The user must not use return or break to leave stmt.\n\n\n\n\n\n","category":"function"},{"location":"embed/#Finch.h.finch_escape","page":"Embedding","title":"Finch.h.finch_escape","text":"jl_value_t* finch_escape(jl_value_t* var)\n\nRemoves var from the current scope and registers it with the parent scope. This meansvar will not be freed when the current scope is closed.\n\n\n\n\n\n","category":"function"},{"location":"embed/#Finch.h.finch_eval","page":"Embedding","title":"Finch.h.finch_eval","text":"jl_value_t* finch_eval(const char* proc)\n\nEvaluate the Julia code represented by the string proc at global scope in the Main module.\n\n\n\n\n\n","category":"function"},{"location":"embed/#Finch.h.finch_consume_vector","page":"Embedding","title":"Finch.h.finch_consume_vector","text":"jl_value_t* finch_consume_vector(jl_datatype_t* type, void* ptr, int len);\n\nCreate a Julia array with elements of datatype type from the pointer ptr. The array will be of length len, no copying will be performed, and Finch may call free(ptr).\n\n\n\n\n\n","category":"function"},{"location":"embed/#Finch.h.finch_free","page":"Embedding","title":"Finch.h.finch_free","text":"void finch_free(jl_value_t* var)\n\nUnregister the Finch-tracked object var within the current scope to allow the garbage collector to free memory. This method should be avoided in favor of using FINCH_SCOPE to limit the lifetime of objects.\n\n\n\n\n\n","category":"function"},{"location":"embed/#Finch.h.finch_mirror_vector","page":"Embedding","title":"Finch.h.finch_mirror_vector","text":"jl_value_t* finch_mirror_vector(jl_datatype_t* type, void* ptr, int len);\n\nCreate a Julia array with elements of datatype type from the pointer ptr. The array will be of length len, no copying will be performed, and Finch may not call free(ptr).\n\n\n\n\n\n","category":"function"},{"location":"embed/#Finch.h.finch_initialize","page":"Embedding","title":"Finch.h.finch_initialize","text":"void finch_initialize()\n\nInitialize Finch. Should be called only once before any other finch calls, from the executable.\n\n\n\n\n\n","category":"function"},{"location":"embed/#Finch.h.finch_root","page":"Embedding","title":"Finch.h.finch_root","text":"jl_value_t* finch_root(jl_value_t* var)\n\nRegister the Julia-allocated object var with Finch on the current scope to avoid garbage collecting it.\n\n\n\n\n\n","category":"function"},{"location":"embed/#Finch.h.finch_exec","page":"Embedding","title":"Finch.h.finch_exec","text":"jl_value_t* finch_exec(const char* proc, jl_value_t* args...)\n\nEvaluate the Julia code represented by the string proc at local scope in the Main module.  proc can optionally contain format specifiers to interpolate julia arguments.  Format specifiers should be either %s for a julia input or %% for a literal % character. For example,\n\n    finch_exec(\"%s + %s\", x, y)\n\nshould evaluate to x + y\n\nfinch_exec caches inputs by their string to avoid repeated compilation.\n\n\n\n\n\n","category":"function"},{"location":"embed/#Finch.h.finch_T","page":"Embedding","title":"Finch.h.finch_T","text":"void finch_[T](S x);\n\nCreate a Julia object of type T from corresponding C object x of type S.\n\n\n\n\n\n","category":"function"},{"location":"embed/#Finch.h.finch_call","page":"Embedding","title":"Finch.h.finch_call","text":"jl_value_t* finch_call(jl_value_t* f, jl_value_t* args...)\n\nCall the Julia function f on the arguments args and return the result. This is a macro that counts the number of arguments.\n\n\n\n\n\n","category":"function"},{"location":"embed/#Finch.h.finch_finalize","page":"Embedding","title":"Finch.h.finch_finalize","text":"void finch_finalize()\n\nFinalize Finch. Should be called at the end of the program to allow Finch to cleanup.\n\n\n\n\n\n","category":"function"},{"location":"development/#Development-Guide","page":"Development Guide","title":"Development Guide","text":"","category":"section"},{"location":"development/","page":"Development Guide","title":"Development Guide","text":"We welcome contributions to Finch! Before you start, please double-check in a Github issue that there is interest from a contributor in moderating your potential pull request.","category":"page"},{"location":"development/#Testing","page":"Development Guide","title":"Testing","text":"","category":"section"},{"location":"development/","page":"Development Guide","title":"Development Guide","text":"All pull requests should pass continuous integration testing before merging. For more information about running tests (including filtering test suites or updating the reference output), run the test script directly:","category":"page"},{"location":"development/","page":"Development Guide","title":"Development Guide","text":"    julia tests/runtests.jl --help","category":"page"},{"location":"development/#Finch-Compilation-Pipeline","page":"Development Guide","title":"Finch Compilation Pipeline","text":"","category":"section"},{"location":"development/#Program-Instances","page":"Development Guide","title":"Program Instances","text":"","category":"section"},{"location":"development/","page":"Development Guide","title":"Development Guide","text":"Finch relies heavily on Julia's metaprogramming capabilities ( macros and generated functions in particular) to produce code. To review briefly, a macro allows us to inspect the syntax of it's arguments and generate replacement syntax. A generated function allows us to inspect the type of the function arguments and produce code for a function body.","category":"page"},{"location":"development/","page":"Development Guide","title":"Development Guide","text":"In normal Finch usage, we might call Finch as follows:","category":"page"},{"location":"development/","page":"Development Guide","title":"Development Guide","text":"julia> C = @fiber(sl(e(0)));\n\njulia> A = @fiber(sl(e(0)), [0, 2, 0, 0, 3]);\n\njulia> B = @fiber(d(e(0)), [11, 12, 13, 14, 15]);\n\njulia> @finch @loop i C[i] = A[i] * B[i];\n\njulia> C\nSparseList (0) [1:5]\n├─[2]: 24\n├─[5]: 45","category":"page"},{"location":"development/","page":"Development Guide","title":"Development Guide","text":"The @macroexpand macro allows us to see the result of applying a macro. Let's examine what happens when we use the @finch macro (we've stripped line numbers from the result to clean it up):","category":"page"},{"location":"development/","page":"Development Guide","title":"Development Guide","text":"julia> (@macroexpand @finch @loop i C[i] = A[i] * B[i]) |> Finch.striplines\nquote\n    var\"#18#res\" = (Finch.execute)(begin\n                let i = index_instance(:i)\n                    (Finch.FinchNotation.loop_instance)(i, (Finch.FinchNotation.assign_instance)((Finch.FinchNotation.access_instance)((Finch.FinchNotation.variable_instance)(:C, (Finch.FinchNotation.index_leaf_instance)(C)), (Finch.FinchNotation.updater_instance)((Finch.FinchNotation.create_instance)()), (Finch.FinchNotation.variable_instance)(:i, (Finch.FinchNotation.index_leaf_instance)(i))), literal_instance(right), (Finch.FinchNotation.call_instance)((Finch.FinchNotation.variable_instance)(:*, (Finch.FinchNotation.index_leaf_instance)(*)), (Finch.FinchNotation.access_instance)((Finch.FinchNotation.variable_instance)(:A, (Finch.FinchNotation.index_leaf_instance)(A)), (Finch.FinchNotation.reader_instance)(), (Finch.FinchNotation.variable_instance)(:i, (Finch.FinchNotation.index_leaf_instance)(i))), (Finch.FinchNotation.access_instance)((Finch.FinchNotation.variable_instance)(:B, (Finch.FinchNotation.index_leaf_instance)(B)), (Finch.FinchNotation.reader_instance)(), (Finch.FinchNotation.variable_instance)(:i, (Finch.FinchNotation.index_leaf_instance)(i))))))\n                end\n            end)\n    begin\n        C = (var\"#18#res\").C\n    end\n    begin\n        var\"#18#res\"\n    end\nend\n","category":"page"},{"location":"development/","page":"Development Guide","title":"Development Guide","text":"In the above output, @finch creates an AST of program instances, then calls Finch.execute on it. A program instance is a struct that contains the program to be executed along with its arguments. Although we can use the above constructors (e.g. loop_instance) to make our own program instance, it is most convenient to use the unexported macro Finch.finch_program_instance:","category":"page"},{"location":"development/","page":"Development Guide","title":"Development Guide","text":"julia> using Finch: @finch_program_instance\n\njulia> prgm = Finch.@finch_program_instance @loop i C[i] = A[i] * B[i]\nloop_instance(index_instance(:i), assign_instance(access_instance(variable_instance(:C, C), updater_instance(create_instance()), (index_instance(:i),)), literal_instance(right), call_instance(variable_instance(:*, *), (access_instance(variable_instance(:A, A), reader_instance(), (index_instance(:i),)), access_instance(variable_instance(:B, B), reader_instance(), (index_instance(:i),))))))","category":"page"},{"location":"development/","page":"Development Guide","title":"Development Guide","text":"As we can see, our program instance contains not only the AST to be executed, but also the data to execute the program with. The type of the program instance contains only the program portion; there may be many program instances with different inputs, but the same program type. We can run our program using Finch.execute, which returns a NamedTuple of outputs.","category":"page"},{"location":"development/","page":"Development Guide","title":"Development Guide","text":"julia> typeof(prgm)\nFinch.FinchNotation.LoopInstance{Finch.FinchNotation.IndexInstance{:i}, Finch.FinchNotation.AssignInstance{Finch.FinchNotation.AccessInstance{Finch.FinchNotation.VariableInstance{:C, Fiber{Finch.SparseListLevel{Int64, Int64, Finch.ElementLevel{0, Int64}}}}, Finch.FinchNotation.UpdaterInstance{Finch.FinchNotation.CreateInstance}, Tuple{Finch.FinchNotation.IndexInstance{:i}}}, Finch.FinchNotation.LiteralInstance{Finch.FinchNotation.right}, Finch.FinchNotation.CallInstance{Finch.FinchNotation.VariableInstance{:*, Finch.FinchNotation.LiteralInstance{*}}, Tuple{Finch.FinchNotation.AccessInstance{Finch.FinchNotation.VariableInstance{:A, Fiber{Finch.SparseListLevel{Int64, Int64, Finch.ElementLevel{0, Int64}}}}, Finch.FinchNotation.ReaderInstance, Tuple{Finch.FinchNotation.IndexInstance{:i}}}, Finch.FinchNotation.AccessInstance{Finch.FinchNotation.VariableInstance{:B, Fiber{Finch.DenseLevel{Int64, Finch.ElementLevel{0, Int64}}}}, Finch.FinchNotation.ReaderInstance, Tuple{Finch.FinchNotation.IndexInstance{:i}}}}}}}\n\njulia> C = Finch.execute(prgm).C\nSparseList (0) [1:5]\n├─[2]: 24\n├─[5]: 45","category":"page"},{"location":"development/","page":"Development Guide","title":"Development Guide","text":"This functionality is sufficient for building finch kernels programatically. For example, if we wish to define a function pointwise_sum() that takes the pointwise sum of a variable number of vector inputs, we might implement it as follows:","category":"page"},{"location":"development/","page":"Development Guide","title":"Development Guide","text":"julia> function pointwise_sum(As...)\n           B = @fiber(d(e(0)))\n           isempty(As) && return B\n           i = Finch.FinchNotation.index_instance(:i)\n           A_vars = [Finch.FinchNotation.variable_instance(Symbol(:A, n), As[n]) for n in 1:length(As)]\n           #create a list of variable instances with different names to hold the input tensors\n           ex = @finch_program_instance 0\n           for A_var in A_vars\n               ex = @finch_program_instance $A_var[i] + $ex\n           end\n           prgm = @finch_program_instance @loop i B[i] = $ex\n           return Finch.execute(prgm).B\n       end\npointwise_sum (generic function with 1 method)\n\njulia> pointwise_sum([1, 2], [3, 4])\nDense [1:2]\n├─[1]: 4\n├─[2]: 6\n","category":"page"},{"location":"development/#Compilation","page":"Development Guide","title":"Compilation","text":"","category":"section"},{"location":"listing/","page":"The Deets","title":"The Deets","text":"CurrentModule = Finch","category":"page"},{"location":"listing/#Public-Functions","page":"The Deets","title":"Public Functions","text":"","category":"section"},{"location":"listing/","page":"The Deets","title":"The Deets","text":"Modules = [Finch]","category":"page"},{"location":"listing/#Finch.CloseScope","page":"The Deets","title":"Finch.CloseScope","text":"CloseScope(ctx)\n\nA transformation to freeze output virtual tensors before they leave scope and are returned to the caller.\n\nSee also: freeze!\n\n\n\n\n\n","category":"type"},{"location":"listing/#Finch.DenseData","page":"The Deets","title":"Finch.DenseData","text":"DenseData(lvl)\n\nRepresents a tensor A where each A[i, :, ..., :] is represented by lvl.\n\n\n\n\n\n","category":"type"},{"location":"listing/#Finch.ElementData","page":"The Deets","title":"Finch.ElementData","text":"ElementData(eltype, default)\n\nRepresents a scalar element of type eltype and default default.\n\n\n\n\n\n","category":"type"},{"location":"listing/#Finch.Fiber","page":"The Deets","title":"Finch.Fiber","text":"Fiber(lvl)\n\nFiber represents the root of a level-tree tensor. To easily construct a valid fiber, use @fiber or fiber. Users should avoid calling this constructor directly.\n\nIn particular, Fiber represents the tensor at position 1 of lvl. The constructor Fiber(lvl) wraps a level assuming it is already in a valid state. The constructor Fiber!(lvl) first initializes lvl assuming no positions are valid.\n\n\n\n\n\n","category":"type"},{"location":"listing/#Finch.HollowData","page":"The Deets","title":"Finch.HollowData","text":"HollowData(lvl)\n\nRepresents a tensor which is represented by lvl but is sometimes entirely default(lvl).\n\n\n\n\n\n","category":"type"},{"location":"listing/#Finch.LowerJulia-Tuple{Any, Finch.DimensionalizeStyle}","page":"The Deets","title":"Finch.LowerJulia","text":"TODO out of date     dimensionalize!(prgm, ctx)\n\nA program traversal which gathers dimensions of tensors based on shared indices. Index sharing is transitive, so A[i] = B[i] and B[j] = C[j] will induce a gathering of the dimensions of A, B, and C into one. The resulting dimensions are gathered into a Dimensions object, which can be accesed with an index name or a (tensor_name, mode_name) tuple.\n\nThe program is assumed to be in SSA form.\n\nSee also: virtual_size, virtual_resize, combinedim, TransformSSA\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.OpenScope","page":"The Deets","title":"Finch.OpenScope","text":"OpenScope(ctx)\n\nA transformation to initialize tensors that have just entered into scope.\n\nSee also: initialize!\n\n\n\n\n\n","category":"type"},{"location":"listing/#Finch.RepeatData","page":"The Deets","title":"Finch.RepeatData","text":"RepeatData(eltype, default)\n\nRepresents an array A[i] with many repeated runs of elements of type eltype and default default.\n\n\n\n\n\n","category":"type"},{"location":"listing/#Finch.SolidData","page":"The Deets","title":"Finch.SolidData","text":"SolidData(lvl)\n\nRepresents a tensor which is represented by lvl\n\n\n\n\n\n","category":"type"},{"location":"listing/#Finch.SparseData","page":"The Deets","title":"Finch.SparseData","text":"SparseData(lvl)\n\nRepresents a tensor A where A[i, :, ..., :] is sometimes entirely default(lvl) and is sometimes represented by lvl.\n\n\n\n\n\n","category":"type"},{"location":"listing/#Finch.SubFiber","page":"The Deets","title":"Finch.SubFiber","text":"SubFiber(lvl, pos)\n\nSubFiber represents a fiber at position pos within lvl.\n\n\n\n\n\n","category":"type"},{"location":"listing/#Finch.TransformSSA","page":"The Deets","title":"Finch.TransformSSA","text":"TransformSSA(freshen)\n\nA transformation of a program to SSA form. Fresh names will be generated with freshen(name).\n\n\n\n\n\n","category":"type"},{"location":"listing/#Finch.assemble_level!","page":"The Deets","title":"Finch.assemble_level!","text":"assemble_level!(lvl, ctx, pos, new_pos)\n\nAssemble and positions pos+1:new_pos in lvl, assuming positions 1:pos were previously assembled.\n\n\n\n\n\n","category":"function"},{"location":"listing/#Finch.base_rules-Tuple{Any, Any}","page":"The Deets","title":"Finch.base_rules","text":"base_rules(alg, ctx)\n\nThe basic rule set for Finch, uses the algebra to check properties of functions like associativity, commutativity, etc. Also assumes the context has a static hash names shash. This rule set simplifies, normalizes, and propagates constants, and is the basis for how Finch understands sparsity.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.combinedim-Tuple{Any, Any, Any}","page":"The Deets","title":"Finch.combinedim","text":"combinedim(ctx, a, b)\n\nCombine the two dimensions a and b.  To avoid ambiguity, only define one of\n\ncombinedim(ctx, ::A, ::B)\ncombinedim(ctx, ::B, ::A)\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.data_rep-Tuple{Any}","page":"The Deets","title":"Finch.data_rep","text":"data_rep(tns)\n\nReturn a trait object representing everything that can be learned about the data based on the storage format (type) of the tensor\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.default","page":"The Deets","title":"Finch.default","text":"default(fbr)\n\nThe default for a fiber is the value that each element of the fiber will have after initialization. This value is most often zero, and defaults to nothing.\n\nSee also: initialize!\n\n\n\n\n\n","category":"function"},{"location":"listing/#Finch.f_code-Tuple{Val{:d}}","page":"The Deets","title":"Finch.f_code","text":"f_code(d) = DenseLevel.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.f_code-Tuple{Val{:e}}","page":"The Deets","title":"Finch.f_code","text":"f_code(e) = ElementLevel.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.f_code-Tuple{Val{:p}}","page":"The Deets","title":"Finch.f_code","text":"f_code(p) = PatternLevel.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.f_code-Tuple{Val{:rl}}","page":"The Deets","title":"Finch.f_code","text":"f_code(rl) = RepeatRLELevel.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.f_code-Tuple{Val{:sc}}","page":"The Deets","title":"Finch.f_code","text":"f_code(sc) = SparseCooLevel.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.f_code-Tuple{Val{:sh}}","page":"The Deets","title":"Finch.f_code","text":"f_code(sh) = SparseHashLevel.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.f_code-Tuple{Val{:sl}}","page":"The Deets","title":"Finch.f_code","text":"f_code(l) = SparseListLevel.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.f_code-Tuple{Val{:sm}}","page":"The Deets","title":"Finch.f_code","text":"f_code(sm) = SparseBytemapLevel.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.f_code-Tuple{Val{:sv}}","page":"The Deets","title":"Finch.f_code","text":"f_code(sv) = SparseVBLLevel.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.ffindnz-Tuple{Any}","page":"The Deets","title":"Finch.ffindnz","text":"ffindnz(arr)\n\nReturn the nonzero elements of arr, as Finch understands arr. Returns (I, V), where I is a tuple of coordinate vectors, one for each mode of arr, and V is a vector of corresponding nonzero values, which can be passed to fsparse.\n\nSee also: (findnz)(https://docs.julialang.org/en/v1/stdlib/SparseArrays/#SparseArrays.findnz)\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.fiber","page":"The Deets","title":"Finch.fiber","text":"fiber(arr, default = zero(eltype(arr)))\n\nCopies an array-like object arr into a corresponding, similar Fiber datastructure. default is the default value to use for initialization and sparse compression.\n\nSee also: fiber!\n\nExamples\n\njulia> println(summary(fiber(sparse([1 0; 0 1]))))\n2×2 @fiber(d(sl(e(0))))\n\njulia> println(summary(fiber(ones(3, 2, 4))))\n3×2×4 @fiber(d(d(d(e(0.0)))))\n\n\n\n\n\n","category":"function"},{"location":"listing/#Finch.fiber!","page":"The Deets","title":"Finch.fiber!","text":"fiber!(arr, default = zero(eltype(arr)))\n\nLike fiber, copies an array-like object arr into a corresponding, similar Fiber datastructure. However, fiber! reuses memory whenever possible, meaning arr may be rendered unusable.\n\n\n\n\n\n","category":"function"},{"location":"listing/#Finch.fiber_ctr-Tuple{Finch.SolidData}","page":"The Deets","title":"Finch.fiber_ctr","text":"fiber_ctr(tns)\n\nReturn an expression that would construct a fiber suitable to hold data with a representation described by tns\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.freeze!-Tuple{Any, Any, Any, Vararg{Any}}","page":"The Deets","title":"Finch.freeze!","text":"freeze!(tns, ctx)\n\nFreeze the update-only virtual tensor tns in the context ctx and return it. After freezing, the tensor is read-only.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.freeze_level!-Tuple{Any, Any, Any}","page":"The Deets","title":"Finch.freeze_level!","text":"freeze_level!(lvl, ctx, pos)\n\nFreeze all fibers in lvl. Positions 1:pos need freezing.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.fsparse","page":"The Deets","title":"Finch.fsparse","text":"fsparse(I::Tuple, V,[ M::Tuple, combine])\n\nCreate a sparse COO fiber S such that size(S) == M and S[(i[q] for i = I)...] = V[q]. The combine function is used to combine duplicates. If M is not specified, it is set to map(maximum, I). If the combine function is not supplied, combine defaults to + unless the elements of V are Booleans in which case combine defaults to |. All elements of I must satisfy 1 <= I[n][q] <= M[n].  Numerical zeros are retained as structural nonzeros; to drop numerical zeros, use dropzeros!.\n\nSee also: sparse\n\nExamples\n\njulia> I = (     [1, 2, 3],     [1, 2, 3],     [1, 2, 3]);\n\njulia> V = [1.0; 2.0; 3.0];\n\njulia> fsparse(I, V) SparseCoo (0.0) [1:3×1:3×1:3] │ │ │  └─└─└─[1, 1, 1] [2, 2, 2] [3, 3, 3]       1.0       2.0       3.0    \n\n\n\n\n\n","category":"function"},{"location":"listing/#Finch.fsparse!","page":"The Deets","title":"Finch.fsparse!","text":"fsparse!(I::Tuple, V,[ M::Tuple])\n\nLike fsparse, but the coordinates must be sorted and unique, and memory is reused.\n\n\n\n\n\n","category":"function"},{"location":"listing/#Finch.fsprand-Tuple{Tuple, Vararg{Any}}","page":"The Deets","title":"Finch.fsprand","text":"fsprand([rng],[type], m::Tuple,p::AbstractFloat,[rfn])\n\nCreate a random sparse tensor of size m in COO format, in which the probability of any element being nonzero is independently given by p (and hence the mean density of nonzeros is also exactly p). Nonzero values are sampled from the distribution specified by rfn and have the type type. The uniform distribution is used in case rfn is not specified. The optional rng argument specifies a random number generator.\n\nSee also: (sprand)(https://docs.julialang.org/en/v1/stdlib/SparseArrays/#SparseArrays.sprand)\n\nExamples\n\njulia> fsprand(Bool, (3, 3), 0.5)\nSparseCoo (false) [1:3,1:3]\n├─├─[1, 1]: true\n├─├─[3, 1]: true\n├─├─[2, 2]: true\n├─├─[3, 2]: true\n├─├─[3, 3]: true  \n\njulia> fsprand(Float64, (2, 2, 2), 0.5)\nSparseCoo (0.0) [1:2,1:2,1:2]\n├─├─├─[2, 2, 1]: 0.6478553157718558\n├─├─├─[1, 1, 2]: 0.996665291437684\n├─├─├─[2, 1, 2]: 0.7491940599574348 \n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.fspzeros-Tuple{Any}","page":"The Deets","title":"Finch.fspzeros","text":"fspzeros([type], shape::Tuple)\n\nCreate a random zero tensor of size m, with elements of type type. The tensor is in COO format.\n\nSee also: (spzeros)(https://docs.julialang.org/en/v1/stdlib/SparseArrays/#SparseArrays.spzeros)\n\nExamples\n\njulia> fspzeros(Bool, (3, 3))\nSparseCoo (false) [1:3,1:3]\n    \njulia> fspzeros(Float64, (2, 2, 2))\nSparseCoo (0.0) [1:2,1:2,1:2]\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.get_reader-Tuple{Any, Any, Vararg{Any}}","page":"The Deets","title":"Finch.get_reader","text":"get_reader(tns, ctx, protos...)\n\nReturn an object (usually a looplet nest) capable of reading the read-only virtual tensor tns.  As soon as a read-only tensor enters scope, each subsequent read access will be initialized with a separate call to get_reader. protos is the list of protocols in each case.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.get_updater-Tuple{Any, Any, Vararg{Any}}","page":"The Deets","title":"Finch.get_updater","text":"get_updater(tns, ctx, protos...)\n\nReturn an object (usually a looplet nest) capable of updating the update-only virtual tensor tns.  As soon as an update only tensor enters scope, each subsequent update access will be initialized with a separate call to get_updater.  protos is the list of protocols in each case.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.getindex_rep-Tuple{Any, Vararg{Any}}","page":"The Deets","title":"Finch.getindex_rep","text":"getindex_rep(tns, idxs...)\n\nReturn a trait object representing the result of calling getindex(tns, idxs...) on the tensor represented by tns.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.getname","page":"The Deets","title":"Finch.getname","text":"getname(ex)\n\nReturn the name of the index expression ex. The name serves as a unique identifier and often corresponds to the variable name which holds a tensor. Tensors can have the same name only if they are === to each other. The names of indices are used to distinguish the loops they reference.\n\n#TODO this function shouldn't exist\n\n\n\n\n\n","category":"function"},{"location":"listing/#Finch.getresults","page":"The Deets","title":"Finch.getresults","text":"getresults(stmt)\n\nReturn an iterator over the result tensors of an index expression. For example, where statements return the results of the consumer, not the producer, and assignments return their left hand sides.\n\n\n\n\n\n","category":"function"},{"location":"listing/#Finch.getrules-Tuple{Any, Any}","page":"The Deets","title":"Finch.getrules","text":"getrules(alg, ctx)\n\nReturn an array of rules to use for annihilation/simplification during  compilation. One can dispatch on the alg trait to specialize the rule set for different algebras.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.getsize","page":"The Deets","title":"Finch.getsize","text":"virtual_size(tns, ctx)\n\nReturn a tuple of the dimensions of tns in the context ctx with access mode mode. This is a function similar in spirit to Base.axes.\n\n\n\n\n\n","category":"function"},{"location":"listing/#Finch.getunbound-Tuple{Any}","page":"The Deets","title":"Finch.getunbound","text":"getunbound(stmt)\n\nReturn an iterator over the names in an index expression that have yet to be bound.\n\njulia> getunbound(@finch_program @loop i :a[i, j] += 2)\n[j]\njulia> getunbound(@finch_program i + j * 2 * i)\n[i, j]\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.getvalue-Tuple{Any}","page":"The Deets","title":"Finch.getvalue","text":"getvalue(ex)\n\nIf isliteral(ex) is true, return the value of ex. Defaults to the identity.\n\nSee also: isliteral\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.initialize!-Tuple{Any, Any}","page":"The Deets","title":"Finch.initialize!","text":"initialize!(tns, ctx)\n\nMelt and initialize the read-only virtual tensor tns in the context ctx and return it. After melting, the tensor is update-only.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.initialize_level!","page":"The Deets","title":"Finch.initialize_level!","text":"initialize_level!(lvl, ctx, pos)\n\nInitialize and thaw all fibers within lvl, assuming positions 1:pos were previously assembled and frozen. The resulting level has no assembled positions.\n\n\n\n\n\n","category":"function"},{"location":"listing/#Finch.isannihilator-Tuple{Any, Any, Any}","page":"The Deets","title":"Finch.isannihilator","text":"isannihilator(algebra, f, x)\n\nReturn true when f(a..., x, b...) = x in algebra.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.isassociative-Tuple{Any, Any}","page":"The Deets","title":"Finch.isassociative","text":"isassociative(algebra, f)\n\nReturn true when f(a..., f(b...), c...) = f(a..., b..., c...) in algebra.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.iscommutative-Tuple{Any, Any}","page":"The Deets","title":"Finch.iscommutative","text":"iscommutative(algebra, f)\n\nReturn true when for all permutations p, f(a...) = f(a[p]...) in algebra.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.isdistributive-Tuple{Any, Any, Any}","page":"The Deets","title":"Finch.isdistributive","text":"isidempotent(algebra, f)\n\nReturn true when f(a, b) = f(f(a, b), b) in algebra.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.isidempotent-Tuple{Any, Any}","page":"The Deets","title":"Finch.isidempotent","text":"isidempotent(algebra, f)\n\nReturn true when f(a, b) = f(f(a, b), b) in algebra.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.isidentity-Tuple{Any}","page":"The Deets","title":"Finch.isidentity","text":"isidentity(algebra, f, x)\n\nReturn true when f(a..., x, b...) = f(a..., b...) in algebra.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.isinverse-Tuple{Any, Any, Any}","page":"The Deets","title":"Finch.isinverse","text":"isinverse(algebra, f, g)\n\nReturn true when f(a, g(a)) is the identity under f in algebra.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.isinvolution-Tuple{Any, Any}","page":"The Deets","title":"Finch.isinvolution","text":"isinvolution(algebra, f)\n\nReturn true when f(f(a)) = a in algebra.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.pattern!-Tuple{Fiber}","page":"The Deets","title":"Finch.pattern!","text":"pattern!(fbr)\n\nReturn the pattern of fbr. That is, return a fiber which is true wherever fbr is structurally unequal to it's default. May reuse memory and render the original fiber unusable when modified.\n\njulia> A = @fiber(sl(e(0.0), 10), [2.0, 0.0, 3.0, 0.0, 4.0, 0.0, 5.0, 0.0, 6.0, 0.0])\nSparseList (0.0) [1:10]\n├─[1]: 2.0\n├─[3]: 3.0\n├─[5]: 4.0\n├─[7]: 5.0\n├─[9]: 6.0\n\njulia> pattern!(A)\nSparseList (false) [1:10]\n├─[1]: true\n├─[3]: true\n├─[5]: true\n├─[7]: true\n├─[9]: true\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.reassemble_level!","page":"The Deets","title":"Finch.reassemble_level!","text":"reassemble_level!(lvl, ctx, pos_start, pos_end)\n\nSet the previously assempled positions from pos_start to pos_end to level_default(lvl).\n\n\n\n\n\n","category":"function"},{"location":"listing/#Finch.setname","page":"The Deets","title":"Finch.setname","text":"setname(ex, name)\n\nReturn a new expression, identical to ex, with the name name.\n\n\n\n\n\n","category":"function"},{"location":"listing/#Finch.striplines-Tuple{Expr}","page":"The Deets","title":"Finch.striplines","text":"striplines(ex)\n\nRemove line numbers\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.trim!-Tuple{Any, Any}","page":"The Deets","title":"Finch.trim!","text":"trim!(tns, ctx)\n\nBefore returning a tensor from the finch program, trim any excess overallocated memory.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.unblock-Tuple{Expr}","page":"The Deets","title":"Finch.unblock","text":"unblock(ex)\n\nFlatten any redundant blocks into a single block, over the whole expression.\n\n\n\n\n\n","category":"method"},{"location":"listing/#Finch.@fiber-Tuple{Any}","page":"The Deets","title":"Finch.@fiber","text":"@fiber ctr [arg]\n\nConstruct a fiber using abbreviated level constructor names. To override abbreviations, expressions may be interpolated with $. For example, Fiber(DenseLevel(SparseListLevel(Element(0.0)))) can also be constructed as @fiber(sl(d(e(0.0)))). Consult the documentation for the helper function f_code for a full listing of level format codes.\n\nOptionally, an argument may be specified to copy into the fiber. This expression allocates. Use fiber(arg) for a zero-cost copy, if available.\n\n\n\n\n\n","category":"macro"},{"location":"level/","page":"Level Formats","title":"Level Formats","text":"CurrentModule = Finch","category":"page"},{"location":"level/#Public-Functions","page":"Level Formats","title":"Public Functions","text":"","category":"section"},{"location":"level/","page":"Level Formats","title":"Level Formats","text":"fiber\nfiber!\nsparse\nsparse!","category":"page"},{"location":"level/#Finch.fiber","page":"Level Formats","title":"Finch.fiber","text":"fiber(arr, default = zero(eltype(arr)))\n\nCopies an array-like object arr into a corresponding, similar Fiber datastructure. default is the default value to use for initialization and sparse compression.\n\nSee also: fiber!\n\nExamples\n\njulia> println(summary(fiber(sparse([1 0; 0 1]))))\n2×2 @fiber(d(sl(e(0))))\n\njulia> println(summary(fiber(ones(3, 2, 4))))\n3×2×4 @fiber(d(d(d(e(0.0)))))\n\n\n\n\n\n","category":"function"},{"location":"level/#Finch.fiber!","page":"Level Formats","title":"Finch.fiber!","text":"fiber!(arr, default = zero(eltype(arr)))\n\nLike fiber, copies an array-like object arr into a corresponding, similar Fiber datastructure. However, fiber! reuses memory whenever possible, meaning arr may be rendered unusable.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Finch","category":"page"},{"location":"#Finch","page":"Home","title":"Finch","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Finch is an adaptable compiler for loop nests over structured arrays. Finch can specialize to tensors with runs of repeated values, or to tensors which are sparse (mostly zero). Finch supports general sparsity as well as many specialized sparsity patterns, like clustered nonzeros, diagonals, or triangles.  In addition to zero, Finch supports optimizations over arbitrary fill values and operators.","category":"page"},{"location":"","page":"Home","title":"Home","text":"At it's heart, Finch is powered by a domain specific language for coiteration, breaking structured iterators into units we call Looplets. The Looplets are lowered progressively, leaving several opportunities to rewrite and simplify intermediate expressions.","category":"page"},{"location":"#Installation:","page":"Home","title":"Installation:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"Finch\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Here's a few examples","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"algebra/","page":"Custom User Functions","title":"Custom User Functions","text":"CurrentModule = Finch","category":"page"},{"location":"algebra/#Register-User-Functions","page":"Custom User Functions","title":"Register User Functions","text":"","category":"section"},{"location":"algebra/","page":"Custom User Functions","title":"Custom User Functions","text":"Finch uses generated functions to compile kernels. If any functions have been defined after Finch was loaded, Finch needs to be notified about them. The most correct approach is to create a trait datatype that subtypes Finch.AbstractAlgebra and call Finch.register on that type. After you call register, that subtype reflects the methods you know to be currently defined at that world age. You can pass your algebra to Finch to run Finch in that world age.","category":"page"},{"location":"algebra/#Declare-Algebraic-Properties","page":"Custom User Functions","title":"Declare Algebraic Properties","text":"","category":"section"},{"location":"algebra/","page":"Custom User Functions","title":"Custom User Functions","text":"Users can help Finch optimize expressions over new functions by declaring key function properties in the algebra. Finch kernels can then be executed using the algebra.","category":"page"},{"location":"algebra/","page":"Custom User Functions","title":"Custom User Functions","text":"As an example, suppose we wanted to declare some properties for the greatest common divisor function gcd. This function is associative and commutative, and the greatest common divisor of 1 and anything else is 1, so 1 is an annihilator.","category":"page"},{"location":"algebra/","page":"Custom User Functions","title":"Custom User Functions","text":"We can express this by subtyping AbstractAlgebra and defining properties as follows:","category":"page"},{"location":"algebra/","page":"Custom User Functions","title":"Custom User Functions","text":"struct MyAlgebra <: AbstractAlgebra end\n\nFinch.isassociative(::MyAlgebra, ::typeof(gcd)) = true\nFinch.iscommutative(::MyAlgebra, ::typeof(gcd)) = true\nFinch.isannihilator(::MyAlgebra, ::typeof(gcd), x) = x == 1","category":"page"},{"location":"algebra/","page":"Custom User Functions","title":"Custom User Functions","text":"When you're all done defining functions that dispatch on your algebra, call Finch.register to register your new algebra in Finch.","category":"page"},{"location":"algebra/","page":"Custom User Functions","title":"Custom User Functions","text":"Finch.register(MyAlgebra)","category":"page"},{"location":"algebra/","page":"Custom User Functions","title":"Custom User Functions","text":"Then, we can call a kernel that uses our algebra!","category":"page"},{"location":"algebra/","page":"Custom User Functions","title":"Custom User Functions","text":"u = @fiber sl(e(1)) #TODO add some data\nv = @fiber sl(e(1)) #TODO add some data\nw = @fiber sl(e(1))\n\n@finch MyAlgebra() @loop i w[i] = gcd(u[i], v[i])","category":"page"},{"location":"algebra/#Properties","page":"Custom User Functions","title":"Properties","text":"","category":"section"},{"location":"algebra/","page":"Custom User Functions","title":"Custom User Functions","text":"The full list of properties recognized by Finch is as follows:","category":"page"},{"location":"algebra/","page":"Custom User Functions","title":"Custom User Functions","text":"isassociative\niscommutative\nisdistributive\nisidempotent\nisidentity\nisannihilator\nisinverse\nisinvolution","category":"page"},{"location":"algebra/#Finch.isassociative","page":"Custom User Functions","title":"Finch.isassociative","text":"isassociative(algebra, f)\n\nReturn true when f(a..., f(b...), c...) = f(a..., b..., c...) in algebra.\n\n\n\n\n\n","category":"function"},{"location":"algebra/#Finch.iscommutative","page":"Custom User Functions","title":"Finch.iscommutative","text":"iscommutative(algebra, f)\n\nReturn true when for all permutations p, f(a...) = f(a[p]...) in algebra.\n\n\n\n\n\n","category":"function"},{"location":"algebra/#Finch.isdistributive","page":"Custom User Functions","title":"Finch.isdistributive","text":"isidempotent(algebra, f)\n\nReturn true when f(a, b) = f(f(a, b), b) in algebra.\n\n\n\n\n\n","category":"function"},{"location":"algebra/#Finch.isidempotent","page":"Custom User Functions","title":"Finch.isidempotent","text":"isidempotent(algebra, f)\n\nReturn true when f(a, b) = f(f(a, b), b) in algebra.\n\n\n\n\n\n","category":"function"},{"location":"algebra/#Finch.isidentity","page":"Custom User Functions","title":"Finch.isidentity","text":"isidentity(algebra, f, x)\n\nReturn true when f(a..., x, b...) = f(a..., b...) in algebra.\n\n\n\n\n\n","category":"function"},{"location":"algebra/#Finch.isannihilator","page":"Custom User Functions","title":"Finch.isannihilator","text":"isannihilator(algebra, f, x)\n\nReturn true when f(a..., x, b...) = x in algebra.\n\n\n\n\n\n","category":"function"},{"location":"algebra/#Finch.isinverse","page":"Custom User Functions","title":"Finch.isinverse","text":"isinverse(algebra, f, g)\n\nReturn true when f(a, g(a)) is the identity under f in algebra.\n\n\n\n\n\n","category":"function"},{"location":"algebra/#Finch.isinvolution","page":"Custom User Functions","title":"Finch.isinvolution","text":"isinvolution(algebra, f)\n\nReturn true when f(f(a)) = a in algebra.\n\n\n\n\n\n","category":"function"},{"location":"algebra/#Rewriting","page":"Custom User Functions","title":"Rewriting","text":"","category":"section"},{"location":"algebra/","page":"Custom User Functions","title":"Custom User Functions","text":"One can also define custom rewrite rules by overloading the getrules function on your algebra.  Unless you want to write the full rule set from scratch, be sure to append your new rules to the old rules, which can be obtained by calling base_rules. Rules can be specified directly on Finch IR using RewriteTools.jl","category":"page"},{"location":"algebra/","page":"Custom User Functions","title":"Custom User Functions","text":"base_rules\ngetrules","category":"page"},{"location":"algebra/#Finch.base_rules","page":"Custom User Functions","title":"Finch.base_rules","text":"base_rules(alg, ctx)\n\nThe basic rule set for Finch, uses the algebra to check properties of functions like associativity, commutativity, etc. Also assumes the context has a static hash names shash. This rule set simplifies, normalizes, and propagates constants, and is the basis for how Finch understands sparsity.\n\n\n\n\n\n","category":"function"},{"location":"algebra/#Finch.getrules","page":"Custom User Functions","title":"Finch.getrules","text":"getrules(alg, ctx)\n\nReturn an array of rules to use for annihilation/simplification during  compilation. One can dispatch on the alg trait to specialize the rule set for different algebras.\n\n\n\n\n\n","category":"function"}]
}
